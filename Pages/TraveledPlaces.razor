@page "/traveledplaces"
@using System.Collections.Generic
@using CountCountry.Data

@inject WeatherForecastService ForecastService

<h3>Traveled Places</h3>

<p>If you have a premium account you can add other places you have travelled before.</p>

@if (forecasts == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>

		<table class="table">
			<thead>
				<tr>
					<th>CountryName</th>
					<th>CityName</th>
					<th>StartDateCount</th>
					<th>EndDateCount</th>
					<th>InsertDate</th>
					<th>BucketList</th>
					<th>SharedStayCount</th>
				</tr>
			</thead>
			<tbody>
			@foreach (var country in listCountries)
			{
						<tr>
					<td>@country.CountryName</td>
					<td>@country.CityName</td>
					<td>@country.StarDateCount</td>
					<td>@country.EndDateCount</td>
					<td>@country.InsertDate</td>
					<td>@country.BucketList</td>
					<td>@country.SharedStayCount</td>
						</tr>
			}
			</tbody>
		</table>
}

@code {
	private WeatherForecast[] forecasts;
	private List<CountryEntity> listCountries = SqliteDataAccess.LoadAllInfoCountries();

	protected override async Task OnInitializedAsync()
	{
		forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

		listCountries = SqliteDataAccess.LoadAllInfoCountries();
	}
}
