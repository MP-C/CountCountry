@page "/globalview"
@using System.Text.Json;
@using System.Globalization;
@using CountCountry.Data;

@*@inject TimeZoneService TimeZoneService;*@
@*@inject WildWordService WildWordService;*@


<h3>Global View</h3>
<div>
    <h5>Details about your current location: </h5>
    <p>Country: 
        <span id="country">

        </span>
    </p>
    <p>State/City:
        <span id="city_region"> 
            @current_cityRegion;
        </span>
    </p>
    <p>Continente:
        <span id="continent">
            @timeZoneId
            @gmtZoneCityName
        </span>
    </p>

    @foreach (var time in timeszone)
    {
        //TimeZoneDTO
        <div>Zone: @time.Zone</div>
        <div>a: @time.a</div>
        @*<div>c: @string (time.c)</div>*@
        <div>c: 
             @if(time.c != null ){
                @foreach(var abreviation in time.c)
                {
                    @abreviation.ToString();
                }
             }
        </div>
        <div>d: @time.d</div>
        <div>r: @time.r</div>
        <div>u: @time.u</div>
        <div> ---------------------</div>
    }

    <h5>Country Details</h5>
	@foreach (var country in wildworlds)
    {
        //WildWorldDTO.name = country.Select(c => c.name).ToList();
        <div>@country.countryName</div>
        <div>@country.countryIso</div>
        <div> ---------------------</div>
    }

</div>

@code {



    private List<TimeZoneDTO>? timeszone = new List<TimeZoneDTO>();
    private List<TimeZoneDTO>? allTimesZones = new List<TimeZoneDTO>();
    private List<WildWordDTO>? wildworlds = new List<WildWordDTO>();
    string timeZoneId;
    string current_Country;
    string current_cityRegion;
    string gmtZoneCityName;
    protected override async Task OnInitializedAsync()
    {

        try
        {
            //Time Zone Info
            TimeZoneInfo timeZone = TimeZoneInfo.Local;
            timeZoneId = timeZone.Id;
            gmtZoneCityName = timeZone.ToString();


            //TimeZones List
            string tCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string tFile = System.IO.Path.Combine(tCurrentDirectory, @"wwwroot\sample-data\timezones.json");
            string tFilePath = Path.GetFullPath(tFile);
            var jsonResult = await File.ReadAllTextAsync(tFilePath);
            List<Dictionary<string, TimeZoneDTO>> allTimesZones = JsonSerializer.Deserialize<List<Dictionary<string, TimeZoneDTO>>>(jsonResult);

            foreach (var timeZoneDict in allTimesZones)
            {
                foreach (var resultTimesZone in timeZoneDict)
                {
                    TimeZoneDTO newZone = new TimeZoneDTO();
                    newZone.Zone = resultTimesZone.Key;              
                    newZone.a = resultTimesZone.Value.a;
                    if (resultTimesZone.Value.c != null)
                    {
                        var listAbreviation = new List<string>();
                        foreach(var abreviationCountry in resultTimesZone.Value.c)
                        {
                            listAbreviation.Add(abreviationCountry);
                        };
                        newZone.c = listAbreviation;
                    }
                    newZone.d= resultTimesZone.Value.d;
                    newZone.e= resultTimesZone.Value.e;
                    newZone.r= resultTimesZone.Value.r;
                    newZone.u= resultTimesZone.Value.u;
                    timeszone.Add(newZone);
                }
            }


            //WildWorld List
            string wCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string wFile = System.IO.Path.Combine(wCurrentDirectory, @"wwwroot\sample-data\wildworld.json");
            string wFilePath = Path.GetFullPath(wFile);
            var data = await File.ReadAllTextAsync(wFilePath);
            wildworlds = JsonSerializer.Deserialize<List<WildWordDTO>>(data);

            if (gmtZoneCityName != null || gmtZoneCityName != "")
            {
                current_cityRegion = timeZoneId.ToString();
            }


            /*
           public void getTimeInfo()
           { }
           public void getTimeZone()
           { }
           public void getWildWorld()
           { }
           //TimeZone Info
           getTimeInfo();

           //TimeZone List
           getTimeZone();

           //WildWorld
           getWildWorld();

           */

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}