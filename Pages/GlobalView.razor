@page "/globalview"
@using System.Text.Json;
@using CountCountry.Data;

@*@inject TimeZoneService TimeZoneService;*@
@*@inject WildWordService WildWordService;*@


<h3>Global View</h3>
<div>
    <h5>TimeZone Details</h5>
    @foreach (var time in allTimesZones)
    {
        //TimeZoneDTO
        <div>@time.Zone</div>
        <div>@time.a</div>
        <div>@time.c</div>
        <div>@time.d</div>
        <div>@time.r</div>
        <div>@time.u</div>
        <div> ---------------------</div>
    }
    <div>@count</div>

    <h5>Country Details</h5>
	@foreach (var country in wildworlds)
    {
        //WildWorldDTO.name = country.Select(c => c.name).ToList();
        <div>@country.countryName</div>
        <div>@country.countryIso</div>
        <div> ---------------------</div>
    }

</div>

@code {

    //private List<TimeZoneDTO>? timeszone = new List<TimeZoneDTO>();
    private List<TimeZoneDTO>? allTimesZones = new List<TimeZoneDTO>();
    private List<WildWordDTO>? wildworlds = new List<WildWordDTO>();
    int count = 0;

    protected override async Task OnInitializedAsync()
    {
        string pais;
        try
        {
            //TimeZone
            string tCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string tFile = System.IO.Path.Combine(tCurrentDirectory, @"wwwroot\sample-data\timezones.json");
            string tFilePath = Path.GetFullPath(tFile);
            var jsonResult = await File.ReadAllTextAsync(tFilePath);
            List<Dictionary<string, TimeZoneDTO>> allTimesZones = JsonSerializer.Deserialize<List<Dictionary<string, TimeZoneDTO>>>(jsonResult);

            foreach (var timeZoneDict in allTimesZones)
            {
                foreach (var resultTimesZone in timeZoneDict)
                {
                    Console.WriteLine($"Time Zone Name: {resultTimesZone.Key}");
                    Console.WriteLine($"TimeZoneDTO Details:");
                    Console.WriteLine($"    a: {resultTimesZone.Value.a}");
                    //resultTimesZone.Value.c.Exists(value => value != "");
                    
                    if (resultTimesZone.Value.c != null)
                    {
                        Console.WriteLine($"    c: {string.Join(", ", resultTimesZone.Value.c)}");
                    }
                    Console.WriteLine($"    d: {resultTimesZone.Value.d}");
                    Console.WriteLine($"    e: {resultTimesZone.Value.e}");
                    Console.WriteLine($"    r: {resultTimesZone.Value.r}");
                    Console.WriteLine($"    u: {resultTimesZone.Value.u}");
                    count = count + 1;
                    if(count == 61)
                    {
                        Console.WriteLine(resultTimesZone);
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(count);
            Console.WriteLine(e);
        }

    //WildWorld
        string wCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
        string wFile = System.IO.Path.Combine(wCurrentDirectory, @"wwwroot\sample-data\wildworld.json");
        string wFilePath = Path.GetFullPath(wFile);
        var data = await File.ReadAllTextAsync(wFilePath);
        Console.Write(data[1].ToString());
        wildworlds = JsonSerializer.Deserialize<List<WildWordDTO>>(data);
        Console.Write(wildworlds);

    }
}